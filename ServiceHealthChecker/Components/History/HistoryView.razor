@if (probingLogs == null)
{
    <ActivityIndicator IsRunning="true" />
}
else
{
    @foreach (var log in probingLogs)
    {
        <Frame BackgroundColor="@(log.Status == ServiceStatus.AliveAndWell ? Palette.Success: Palette.Danger)" >
            <Label Text="@($"Name: {log.ServiceName}\n" +
                       $"URL: {log.UsedUri.ToString()}\n" +
                       $"Method: {log.UsedMethod}\n" +
                       $"Expected response: {log.ExpectedResponseCode}\n" +
                       $"Got response: {log.ReceivedResponseCode}\n" +
                       $"Result: {log.Status}")" />
        </Frame>
    }
}


@using System.Collections.ObjectModel;
@using ServiceHealthChecker.DB.Models;
@using System.Threading;
@code {

    [Parameter]
    public int ServiceId { get; set; } = 0;

    private List<ProbingLog> probingLogs = null;


    protected override async Task OnInitializedAsync()
    {
        //little hack to make sure to break free from render loop
        await Task.Delay(1);
        await RefreshLogs();

    }

    //todo merge if not used elsewhere
    private async Task RefreshLogs()
    {
        probingLogs = await App.LogsDb.GetProbingLogsAsync(ServiceId);
        StateHasChanged();

    }
}
