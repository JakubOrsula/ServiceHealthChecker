@using ServiceHealthChecker.DB.Models;

@if (_displayedServices == null)
{
    <ActivityIndicator IsRunning="true" />
}
else
{
    @if (selectedService != null)
    {
        <ServiceDetailPage service="@selectedService" GoBack="@(() => selectedService = null)" />
    }
    else
    {
        @switch (serviceView)
        {
            case ServiceViews.ViewList:
                @foreach (var service in _displayedServices)
                {
                    <Frame StyleClass="genericContainer">
                        <ServiceHealthChecker.Components.Services.ServiceSlot @key=@service service=@service ServiceSelected="@((Service s) => selectedService = s)" />
                    </Frame>
                }
                <Button OnClick="@(() => serviceView = ServiceViews.CreateNew)" 
                        Text="Create new service"
                        StyleClass="btn btn-outline-primary" />
                break;
            case ServiceViews.CreateNew:
                <ServiceForm newService="@(new DB.Models.Service {
                                 Method = HttpMethods.Get,
                                 Name = "",
                                 URI = new Uri("https://example.com/")
                             })"
                             DoneCallback="@(() => { serviceView = ServiceViews.ViewList; RefreshDisplayedServices(); })" />
                break;
        }
    }
}

@code
{
    private enum ServiceViews
    {
        ViewList,
        ViewDetail,
        CreateNew
    }

    private ServiceViews serviceView = ServiceViews.ViewList;

    private Service selectedService = null;

    private List<Service> _displayedServices = null;

    protected override async Task OnInitializedAsync()
    {
        //little hack to make sure to break free from render loop
        await Task.Delay(1);
        App.ServicesDb.ServiceDeletedEventHandler += (_, __) => RefreshDisplayedServices();
        await RefreshDisplayedServices();

    }

    private async Task RefreshDisplayedServices()
    {
        var services = await App.ServicesDb.GetServicesAsync();

        if (_displayedServices == null)
        {
            _displayedServices = services.ToList();
        }
        else
        {
            _displayedServices.Clear();
            _displayedServices.AddRange(services.ToList());
        }
        StateHasChanged();
    }

}
