@using ServiceHealthChecker.DB.Models

    <Frame>
        <StackLayout>
            <StackLayout Orientation="XF.StackOrientation.Horizontal">
                <Label Text=@Service.Name />
                @if (info == null)
                {
                    <ActivityIndicator IsRunning="true" />
                }
                else
                {
                    <Label Text=@info.Status.ToString() />
                }
            </StackLayout>
            <StackLayout Orientation="XF.StackOrientation.Horizontal">
                <Button Text="Detail" OnClick=@(() => ServiceSelected.InvokeAsync(Service)) IsEnabled=@(!isProbing) />
                <Button Text="Probe" OnClick=@ProbeService IsEnabled=@(!isProbing) />
                <ActivityIndicator IsVisible="isProbing" IsRunning="true" />
            </StackLayout>
        </StackLayout>
    </Frame>

@code
{
    [Parameter]
    public Service Service { get; set; }

    [Parameter]
    public EventCallback<Service> ServiceSelected { get; set; }

    private ProbingLog info = null;

    private bool isProbing;

    private async void ProbeService()
    {
        isProbing = true;
        var result = await Testers.Tester.TestService(Service);
        await App.LogsDb.SaveProbingLogAsync(result);
        isProbing = false;
        RefreshInfo();
    }

    protected override async Task OnInitializedAsync()
    {
        //little hack to make sure to break free from render loop
        await Task.Delay(1);
        await RefreshInfo();

    }

    private async Task RefreshInfo()
    {
        info = (await App.LogsDb.GetProbingLogsAsync(Service.ID)).FirstOrDefault() ?? new ProbingLog();
        StateHasChanged();
    }
}