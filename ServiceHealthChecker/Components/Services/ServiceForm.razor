@using ServiceHealthChecker.DB.Models
@using ServiceHealthChecker.Helpers
@using ServiceHealthChecker.Components.Misc
@using System.Net

<Entry Placeholder="Name"
       ClearButtonVisibility="XF.ClearButtonVisibility.WhileEditing"
       @bind-Text="newService.Name" />

<Entry Placeholder="Enter url here"
       ClearButtonVisibility="XF.ClearButtonVisibility.WhileEditing"
       @bind-Text="URIstring" />

@* METHOD *@
<Label Text="Select method:" StyleClass="h5" />
<RadioButtonGroup Items="@(Enum.GetValues(typeof(HttpMethods)).Cast<HttpMethods>().Select((e, i) => (i, e.ToHttpMethodString())))"
                  SelectedItem="@((int)newService.Method)"
                  defaultItemIndex="(int)HttpMethods.Get"
                  SetItem="((m) => newService.Method = (HttpMethods)m)" />

@* REQUEST FIELDS *@
<Label Text="Select request field to edit:" StyleClass="h5" />
<RadioButtonGroup Items="@(new List<(int i, string v)> { ((int)RequestFields.Headers, "Headers"), ((int)RequestFields.QueryParams, "Query parameters")})"
                  SelectedItem="@((int)selectedRequestField)"
                  defaultItemIndex="(int)RequestFields.None"
                  SetItem="((m) => selectedRequestField = (RequestFields)m)" />

@switch (selectedRequestField)
{
    case RequestFields.Headers:
        <MyDictionaryView Entries=@(newService.Headers) AddEntryCallback=@(() => newService.Headers.Add(new Header())) />
        break;
    case RequestFields.QueryParams:
        <MyDictionaryView Entries=@(newService.QueryParams) AddEntryCallback=@(() => newService.QueryParams.Add(new QueryParam())) />
        break;

}


@* RESPONSE FIELDS *@
<Label Text="Select validation field to edit:" StyleClass="h5" />
<RadioButtonGroup Items="@(new List<(int i, string v)> { ((int)ResponseFields.BodyMustContain, "Body must contain"), ((int)ResponseFields.BodyMustNotContain, "Body must not contain")})"
                  SelectedItem="@((int)selectedResponseField)"
                  defaultItemIndex="(int)ResponseFields.None"
                  SetItem="((m) => selectedResponseField = (ResponseFields)m)" />


@switch (selectedResponseField)
{
    case ResponseFields.BodyMustContain:
        <StringCollectionView Entries=@(newService.BodyMustContain) AddEntryCallback=@(() => newService.BodyMustContain.Add(new BodyMustContain())) />
        break;
    case ResponseFields.BodyMustNotContain:
        <StringCollectionView Entries=@(newService.BodyMustNotContain) AddEntryCallback=@(() => newService.BodyMustNotContain.Add(new BodyMustNotContain())) />
        break;

}


@* EXPECTED CODE *@
<StackLayout Orientation="XF.StackOrientation.Horizontal">
    <Label Text="Response code:" VerticalOptions="XF.LayoutOptions.CenterAndExpand" StyleClass="h5" />
    <Entry Placeholder="Expected response code"
           ClearButtonVisibility="XF.ClearButtonVisibility.WhileEditing"
           @bind-Text="ResponseCodeString"
           VerticalOptions="XF.LayoutOptions.CenterAndExpand" />
</StackLayout>


@* TIMEOUT *@
<StackLayout Orientation="XF.StackOrientation.Horizontal">
    <Label Text="Timeout:" VerticalOptions="XF.LayoutOptions.CenterAndExpand" StyleClass="h5" />
    <Entry ClearButtonVisibility="XF.ClearButtonVisibility.WhileEditing"
           @bind-Text="timeoutString" WidthRequest="80" />
    <Label Text="s" VerticalOptions="XF.LayoutOptions.CenterAndExpand" StyleClass="h5" />
</StackLayout>


@* ERRORS ARE HERE *@
<Label IsVisible="@(ErrorsInString.Length != 0)" Text="@ErrorsInString" TextColor="XF.Color.Red" StyleClass="h5" />


@* CONTROLS *@
<StackLayout Orientation="XF.StackOrientation.Horizontal">
    <Button Text="Save"
            IsEnabled="@(!isSaving)"
            OnClick="@OnSaveServiceButtonClicked" StyleClass="btn btn-primary" />
    <Button Text="Abort" 
            IsEnabled="@(!isSaving)"
            OnClick="@DoneCallback" 
            StyleClass="btn btn-danger">
    </Button>
    <ActivityIndicator IsVisible="isSaving" IsRunning="true" />
</StackLayout>

@code {

    private enum RequestFields
    {
        None,
        Headers,
        QueryParams
    }

    private enum ResponseFields
    {
        None,
        BodyMustContain,
        BodyMustNotContain
    }

    [Parameter]
    public Service newService { get; set; }

    [Parameter]
    public EventCallback DoneCallback { get; set; }

    private string URIstring = "";

    private string ResponseCodeString = "";

    private string timeoutString;

    private string ErrorsInString = "";

    private bool isSaving;

    private RequestFields selectedRequestField = RequestFields.None;

    private ResponseFields selectedResponseField = ResponseFields.None;

    protected override void OnInitialized()
    {
        URIstring = newService.URI.ToString();
        ResponseCodeString = ((int)newService.ExpectedResponseCode).ToString();
        timeoutString = newService.Timeout.TotalSeconds.ToString();
    }


    private async void OnSaveServiceButtonClicked()
    {
        isSaving = true;
        ErrorsInString = "";


        if (Uri.TryCreate(URIstring, UriKind.Absolute, out var apiUrl))
        {
            newService.QueryParams.AddRange(Convertors.QueryParamsExtractor(URIstring));
            apiUrl = new Uri(apiUrl.GetLeftPart(UriPartial.Path));

            if (apiUrl.Scheme == Uri.UriSchemeHttps)
            {
                newService.URI = apiUrl;
            }
            else
            {
                ErrorsInString += "Cleartext traffic is not allowed\n";
            }
        }
        else
        {
            ErrorsInString += "Couldn't parse your url\n";
        }

        if (ResponseCodeString.Length > 0)
        {
            if (int.TryParse(ResponseCodeString, out var responseCode) && Enum.IsDefined(typeof(HttpStatusCode), responseCode))
            {
                newService.ExpectedResponseCode = (HttpStatusCode)responseCode;
            }
            else
            {
                ErrorsInString += "Response code invalid\n";
            }
        }

        if (timeoutString.Length > 0)
        {
            if (int.TryParse(timeoutString, out var timeout))
            {
                newService.Timeout = TimeSpan.FromSeconds(timeout);
            }
            else
            {
                ErrorsInString += "Timeout format invalid\n";
            }
        }

        // I can't think of smarter way of doing this rn
        newService.Headers.RemoveAll(h => string.IsNullOrWhiteSpace(h.Value));
        newService.QueryParams.RemoveAll(h => string.IsNullOrWhiteSpace(h.Value));
        newService.BodyMustContain.RemoveAll(h => string.IsNullOrWhiteSpace(h.Value));
        newService.BodyMustNotContain.RemoveAll(h => string.IsNullOrWhiteSpace(h.Value));

        if (ErrorsInString.Length == 0)
        {
            await App.ServicesDb.SaveServiceAsync(newService);

            isSaving = false;
            DoneCallback.InvokeAsync(this);
        }
        else
        {
            isSaving = false;
            StateHasChanged();
        }
    }

}