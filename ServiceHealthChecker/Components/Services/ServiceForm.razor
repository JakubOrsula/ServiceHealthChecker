@using ServiceHealthChecker.DB.Models
@using ServiceHealthChecker.Helpers
@using ServiceHealthChecker.Components.Misc
@using System.Net

<Entry Placeholder="Name"
       ClearButtonVisibility="XF.ClearButtonVisibility.WhileEditing"
       @bind-Text="newService.Name" />

<Entry Placeholder="Enter url here"
       ClearButtonVisibility="XF.ClearButtonVisibility.WhileEditing"
       @bind-Text="URIstring" />

<ServiceFormChooseMethod Methods="@(new List<HttpMethods>{ HttpMethods.Get, HttpMethods.Post, HttpMethods.Put, HttpMethods.Delete})"
                         SelectedMethod="@newService.Method"
                         SetMethod="@((m) => newService.Method = m)" />

@* HEADERS *@
<Button Text="Headers >" OnClick="@(() => showMask ^= 1 << (int) Sections.Headers)" />
@if ((showMask & (1 << (int)Sections.Headers)) != 0)
{
    <MyDictionaryView Entries=@(newService.Headers) AddEntryCallback=@(() => newService.Headers.Add(new Header())) />
}

@* QUERY PARAMS *@
<Button Text="Query params >" OnClick="@(() => showMask ^= 1 << (int) Sections.QueryParams)" />
@if ((showMask & (1 << (int)Sections.QueryParams)) != 0)
{
    <MyDictionaryView Entries=@(newService.QueryParams) AddEntryCallback=@(() => newService.QueryParams.Add(new QueryParam())) />
}

@* BODY MUST CONTAIN *@
<Button Text="Body must conatin >" OnClick="@(() => showMask ^= 1 << (int) Sections.BodyMustContain)" />
@if ((showMask & (1 << (int)Sections.BodyMustContain)) != 0)
{
    <StringCollectionView Entries=@(newService.BodyMustContain) AddEntryCallback=@(() => newService.BodyMustContain.Add(new BodyMustContain())) />
}

@* BODY MUST NOT CONTAIN *@
<Button Text="Body must not conatin >" OnClick="@(() => showMask ^= 1 << (int) Sections.BodyMustNotContain)" />
@if ((showMask & (1 << (int)Sections.BodyMustNotContain)) != 0)
{
    <StringCollectionView Entries=@(newService.BodyMustNotContain) AddEntryCallback=@(() => newService.BodyMustNotContain.Add(new BodyMustNotContain())) />
}


@* EXPECTED CODE *@
<StackLayout Orientation="XF.StackOrientation.Horizontal">
    <Label Text="Response code:" />
    <Entry Placeholder="Expected response code"
           ClearButtonVisibility="XF.ClearButtonVisibility.WhileEditing"
           @bind-Text="ResponseCodeString" />
</StackLayout>


@* TIMEOUT *@
<StackLayout Orientation="XF.StackOrientation.Horizontal">
    <Label Text="Timeout:" />
    <Entry ClearButtonVisibility="XF.ClearButtonVisibility.WhileEditing"
           @bind-Text="timeoutString" />
    <Label Text="s" />
</StackLayout>


@* ERRORS ARE HERE *@
<Label IsVisible="@(ErrorsInString.Length != 0)" Text="@ErrorsInString" TextColor="XF.Color.Red" />


@* CONTROLS *@
<StackLayout Orientation="XF.StackOrientation.Horizontal">
    <Button Text="Save"
            IsEnabled="@(!isSaving)"
            OnClick="@OnSaveServiceButtonClicked" />
    <Button IsEnabled="@(!isSaving)"
            OnClick="@DoneCallback">
        Abort
    </Button>
    <ActivityIndicator IsVisible="isSaving" IsRunning="true" />
</StackLayout>

@code {

    private enum Sections
    {
        None,
        Headers,
        QueryParams,
        BodyMustContain,
        BodyMustNotContain
    }

    [Parameter]
    public Service newService { get; set; }

    [Parameter]
    public EventCallback DoneCallback { get; set; }

    private string URIstring = "";

    private string ResponseCodeString = "";

    private string timeoutString;

    private string ErrorsInString = "";

    private bool isSaving;

    private int showMask = (int)Sections.None;

    protected override void OnInitialized() //todo go back to async and stahaschanged
    {
        URIstring = newService.URI.ToString();
        ResponseCodeString = ((int)newService.ExpectedResponseCode).ToString();
        timeoutString = newService.Timeout.TotalSeconds.ToString();
    }


    private async void OnSaveServiceButtonClicked()
    {
        isSaving = true;
        ErrorsInString = "";


        if (Uri.TryCreate(URIstring, UriKind.Absolute, out var apiUrl))
        {
            newService.QueryParams.AddRange(Convertors.QueryParamsExtractor(URIstring));
            apiUrl = new Uri(apiUrl.GetLeftPart(UriPartial.Path));

            if (apiUrl.Scheme == Uri.UriSchemeHttps)
            {
                newService.URI = apiUrl;
            }
            else
            {
                ErrorsInString += "Cleartext traffic is not allowed\n";
            }
        }
        else
        {
            ErrorsInString += "Couldn't parse your url\n";
        }

        if (ResponseCodeString.Length > 0)
        {
            if (int.TryParse(ResponseCodeString, out var responseCode) && Enum.IsDefined(typeof(HttpStatusCode), responseCode))
            {
                newService.ExpectedResponseCode = (HttpStatusCode)responseCode;
            }
            else
            {
                ErrorsInString += "Response code invalid\n";
            }
        }

        if (timeoutString.Length > 0)
        {
            if (int.TryParse(timeoutString, out var timeout))
            {
                newService.Timeout= TimeSpan.FromSeconds(timeout);
            }
            else
            {
                ErrorsInString += "Timeout format invalid\n";
            }
        }

        // I can't think of smarter way of doing this rn
        newService.Headers.RemoveAll(h => string.IsNullOrWhiteSpace(h.Value));
        newService.QueryParams.RemoveAll(h => string.IsNullOrWhiteSpace(h.Value));
        newService.BodyMustContain.RemoveAll(h => string.IsNullOrWhiteSpace(h.Value));
        newService.BodyMustNotContain.RemoveAll(h => string.IsNullOrWhiteSpace(h.Value));

        if (ErrorsInString.Length == 0)
        {
            await App.ServicesDb.SaveServiceAsync(newService);

            isSaving = false;
            DoneCallback.InvokeAsync(this);
        }
        else
        {
            isSaving = false;
            StateHasChanged();
        }
    }

}