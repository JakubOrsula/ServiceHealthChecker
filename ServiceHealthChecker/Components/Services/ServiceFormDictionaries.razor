@using ServiceHealthChecker.Components.Misc;

<StackLayout Orientation="XF.StackOrientation.Horizontal">
    @for(var i = 0; i < Dictionaries.Count(); i++)
    {
        <Button Text="@Dictionaries[i].name" OnClick="@(() => selectedDictionary = i)" IsEnabled="@(i != selectedDictionary)" />
    }
</StackLayout>

@if (entries == null)
{
    <ActivityIndicator IsRunning="true" />
} else
{
    <MyDictionaryView Entries="entries" EntryFactory="Dictionaries[selectedDictionary].EntryFactory" SaveEntries="Dictionaries[selectedDictionary].saveEntries" />
}

<Button Text="Close" OnClick="@(() => selectedDictionary = -1)" IsEnabled="@(selectedDictionary != -1)" />

@using ServiceHealthChecker.DB.Models;
@code {
    [Parameter]
    public List<(string name, int ServiceId, Func<IMyDictionary> EntryFactory, Func<int, Task<List<IMyDictionary>>> getEntries, Func<List<IMyDictionary>, Task> saveEntries)> Dictionaries { get; set; }

    private int selectedDictionary = -1;

    private List<IMyDictionary> entries = null;

    private async Task switchToDictionary(int i)
    {
        selectedDictionary = i;
        entries = null;
        StateHasChanged();
        entries = await Dictionaries[i].getEntries(Dictionaries[i].ServiceId);
        StateHasChanged();
    }

}
